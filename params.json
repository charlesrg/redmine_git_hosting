{"name":"Redmine Git Hosting","tagline":"","body":"# Redmine Git Hosting Plugin (v0.5.1x)\r\n\r\nA ChiliProject / Redmine plugin which makes configuring your own git hosting easy. This plugin allows straightforward management\r\nof gitolite and associated public keys, the git daemon, and integrates code from Scott Schacon's \"grack\" utility\r\nto provide Git Smart HTTP access.  Git repositories are automatically created when the repository is created in\r\nRedmine.  There is also an option to automatically create a git repository for a project, when the project is created.\r\nCaching functionality is also implemented to speed page-load times for viewing git repositories.\r\n\r\nRelease Notes are available off the wiki: https://github.com/kubitron/redmine_git_hosting/wiki/Release-Notes.\r\n\r\n## Compatibility\r\n\r\nThe current version of this plugin is not compatible with all versions of Redmine and ChiliProject.  As of this writing, it\r\nshould be compatible with the following versions:\r\n\r\n* **Redmine:** This plugin should work with Redmine branches 1.1-Stable through 1.4-Stable (including sub-versions).  **It does not currently work with\r\nthe Redmine trunk or Redmine version 2.x, since the plugin is not currently compatible with Rails 3.x.**\r\n\r\n* **ChiliProject:** This plugin should work with ChiliProject 2.0.0 through 3.3.x. It has been successfully used with at least 2.0.x, 2.5.x, 2.7.x, and 3.0.x, and 3.3.x releases, however some problems have been occasionally reported with newer versions of ChiliProject.  These incompatibilities will get fixed when possible. \r\n\r\nThis plugin is compatible with most versions of gitolite with versions < 3.x.  *This plugin is currently not fully functional with 3.x versions of gitolite, so it is best to avoid them for now.*  Gitolite \r\nversions >= 2.0.3 provide slightly better resilience to recover from configuration problems that prevent administrative access (the plugin will exploit **gl-admin-push** to fix the access key).\r\n\r\n## Configuration Strategy\r\n\r\nOne major problem when configuring ChiliProject/Redmine + Git is how the git repositories are accessed,\r\nand in particular setting permissions properly. This plugin solves this problem by allowing the web server/rails user to run git via sudo. A previous \r\nversion of this plugin (see ssh branch) requires the configuration of git to run through ssh, but using sudo to allow the web server user to run commands \r\nas the git user is much faster. To configure your sudoers file to allow your web server user to run commands as git, and your git user\r\nto run commands as the web server user add these two lines to your sudoers file (run visudo to edit this file):\r\n\r\n    www-data        ALL=(git)       NOPASSWD:ALL\r\n    git             ALL=(www-data)  NOPASSWD:ALL\r\n\r\nThis assumes *www-data* is your web server/rails user, and *git* is your git user (the user gitolite is installed under).\r\nThis will allow www-data to execute commands as git without prompting for a password and git to execute commands\r\nas www-data without prompting for a password.  No other access (e.g. no root access, permissions to run commands\r\nas other users) are granted by these lines.  These lines are only there to facilitate communication between the\r\nweb server user and the git user, no other users, keeping the system secure.\r\n\r\nAlso, the *requiretty* sudo setting can prevent the plugin from working correctly.  Several users have reported this\r\nproblem on CentOS.  Check the *Defaults* directive in the sudoers file to see if this setting has been set.  You address \r\nthe problem by either removing *requiretty* from the *Defaults* directive, or by adding the following \r\nlines below the original *Defaults* directive to remove this requirement for only the two necessary users:\r\n\r\n    Defaults:git      !requiretty\r\n    Defaults:www-data !requiretty\r\n\r\nAgain, this assumes  *www-data* is your web server/rails user, and *git* is the user gitolite is installed under.\r\n\r\nNote that this guide refers to the \"web server user\" as the user under which Rails is being, which is usually (but \r\nnot always) the same as the user that runs the main web server.  If you are running Rails under a different user, follow\r\nthese instructions using that user, not the one for the main web server.\r\n\r\nAs of the most recent set of patches, this plugin is compatible with running multiple Redmine installations on the same server, each\r\nwith the same *or* different gitolite users/repositories.  The later configuration (multiple Redmine installations, each with a different\r\ngitolite installation) is particularly useful for a web-hosting scenario with independent developers.\r\n\r\n## Step-By-Step configuration instructions\r\n\r\n**(1)** Install gitolite.  If possible, use gitolite version >= 2.0.3, so that the plugin will be able to \r\nrecover from a variety of failures that mess up administrative access to the gitolite repository (the plugin will utilize **gl-admin-push**\r\nto fixup admin access in these circumstances).  Note that the plugin will work with earlier versions of gitolite; however,\r\nit will not be able to recover from as many faults (it will attempt to use **gl-setup** which doesn't work quite as well).\r\n\r\nThe fine details of gitolite configuration are beyond the scope of these instructions, and there are plenty of guides elsewhere on configuration\r\noptions.  The following provides a simple (working) configuration.  We will assume that gitolite has been installed for user \"git\" (adjust accordingly\r\nif gitolite has been installed with some other username).  Generate an \r\nadministrator key and initialize the gitolite repository in the following fashion as root:\r\n\r\n    su git\r\n    ssh-keygen -N \"\" -f ~/.ssh/id_rsa\r\n    gl-setup ~/.ssh/id_rsa.pub\r\n\r\nSimply take any defaults offered by gl-setup (i.e. quit out of offered edit of the configuration file without making any changes). These commands \r\nwill generate a new key in the .ssh directory of the \"git\" user, and use this key as the gitolite administrative key during the \r\ninitialization of the gitolite repository. \r\n\r\nYou may choose to generate your administrative key in another way.  However you generate your key, it is important that this key not have a passphrase\r\nset.  *Further, it is very important that this ssh key be unique and not used for anything other than administrative access, i.e. should not be used by \r\nany user as their access key.*\r\n\r\n**(2)** If you want to enable anonymous access to your repositories via the git:// protocol you will need to\r\ninstall the git-daemon.  The details of this are beyond the scope of the tutorial as well (and again there\r\nare lots of available guides out there).  This step is optional -- if you don't want to enable anonymous\r\naccess you can skip it.\r\n\r\n**(3)** Run visudo (you will need root permissions to run this) and set the necessary lines in your sudoers file,\r\nlisted above.  Assuming your web server is run as www-data and gitolite is installed as git, you need to add\r\nthis to your sudoers file:\r\n\r\n    www-data        ALL=(git)       NOPASSWD:ALL\r\n    git             ALL=(www-data)  NOPASSWD:ALL\r\n\r\nIf you have the *requiretty* set in the *Defaults* directive of your sudoers file (it is there by default in CentOS) either remove it or add the following \r\nlines below the original directive:\r\n\r\n    Defaults:git      !requiretty\r\n    Defaults:www-data !requiretty\r\n\r\n*Note: with at least some versions of Ubuntu, you must place any additions to the sudoers file at the end, otherwise the line starting with \"admin ...\" ends up \r\nnegating these additions -- probably to your great frustration.*\r\n\r\n\r\n**(4)** In the root of your Redmine/ChiliProject rails directory -- the Redmine/ChiliProject root, not the plugin\r\nroot, and not the public directory -- create a directory called .ssh, and copy your gitolite administrative public/private\r\nkey pair into this directory using \"gitolite_admin_id_rsa\" as the base name.  Then change the owner of these files to www-data and \r\nthe permissions to 600 for the private key and 644 for the public key.  Assuming that you followed the key-generation step from (1) above, \r\nthese instructions translate to performing the following as root:\r\n\r\n    cd REDMINE_ROOT\r\n    mkdir .ssh\r\n    cp ~git/.ssh/id_rsa     .ssh/gitolite_admin_id_rsa\r\n    cp ~git/.ssh/id_rsa.pub .ssh/gitolite_admin_id_rsa.pub\r\n    \r\n    chown www-data -R .ssh\r\n    chmod 700 .ssh\r\n    chmod 600 .ssh/gitolite_admin_id_rsa\r\n    chmod 644 .ssh/gitolite_admin_id_rsa.pub\r\n\r\n\r\n**(5)** Clone the redmine_git_hosting plugin into the vendor/plugins subdirectory of your Redmine/ChiliProject\r\nroot directory:\r\n\r\n    cd REDMINE_ROOT/vendor/plugins\r\n    git clone https://github.com/kubitron/redmine_git_hosting.git\r\n    rm -rf redmine_git_hosting/.git\r\n    cd ../..\r\n\r\n\r\n**(6)** It is best to set several plugin variables BEFORE you run the db:migrate\\_plugins task in step (7).  In particular it is important \r\nthat the **gitScriptDir**, **gitUser**, **httpServer**,  **gitServer**, **gitoliteIdentityFile** and **gitoliteIdentityPublicKeyFile**\r\nvariables are set correctly.  Others that could be set include **gitConfigFile**, **gitConfigHasAdminKey**, **gitRepositoryBasePath**, \r\n**gitRedmineSubdir**, **gitRepositoryHierarchy**, and **gitRepositoryIdentUnique** (for Redmine 1.4+); however, the default values for these variables should be sufficient for most installations.\r\n\r\nTo perform initial adjustment of settings, open an editor and edit 'REDMINE_ROOT/vendor/plugins/redmine_git_hosting/init.rb' file. \r\nStarting on line 17, you will see the settings definitions you should edit.\r\n\r\n* The **gitSciptDir** variable indicates which directory will hold customized scripts.  When *relative*, this variable indicates a directory relative to the \r\nroot of the plugin.  The default value of ' ' (empty), means that scripts will be written to 'REDMINE_ROOT/vendor/plugins/redmine_git_hosting/bin'.  *This \r\ndefault location should be sufficient for most installations.*  \r\n\r\n    An *absolute* path can be utilized to place scripts anywhere in the filesystem.  For instance, if you would prefer for the scripts to be placed in the /tmp directory \r\n    to mimic the behavior of prior versions of plugin, you can set **gitScriptDir** to the same directory as **gitTemporaryDir** (i.e. '/tmp/redmine_git_hosting/' by\r\n    default). Note that the script directory must be executable (thereby preventing scripts from being placed in the /tmp directory some systems).  \r\n\r\n    If non-empty, the **gitScriptDir** path should end in a path separator, e.g. '/'. In step (8), below, you will build the scripts and decide whether they can be \r\n    modifiable by the plugin while it is running.\r\n\r\n* The **gitUser** is the user under which gitolite is installed.  This plugin can handle hosts with more than one gitolite repository (each with a different \r\nvalue for **gitUser**).  \r\n\r\n* The **httpServer** variable should be set to the hostname which will be used to access your Redmine site, e.g. www.my-own-personal-git-host-server.com.  This \r\nvariable may optionally include a port using the ':portnum' syntax, i.e. www.my-own-person-git-host-server.com:8000.  Unlike earlier versions of \r\nthis plugin, this variable should *not* include the path to your Redmine root.\r\n\r\n* The **gitServer** variable should be set to the hostname which will be used to access the gitolite repositories via ssh.  Like **httpServer**, this variable may \r\noptionally include a port using the ':portnum' syntax, i.e. www.my-own-person-git-host-server.com:444.  In most configurations, the **gitServer** \r\nvariable will be identical to the **httpServer**, except when ports are involved.  *This plugin does not currently work well when* **gitServer** *is on a\r\ndifferent physical machine from the Redmine installation (i.e. a different host than* **httpServer***).*\r\n\r\nIf you followed the above directions you will not need to modify the **gitoliteIdentityFile** or **gitoliteIdentityPublicKeyFile** variables -- these specify\r\nthe path to the private/public key files for accessing the gitolite admin repository.  Further, although you can change the following three variables, \r\ntheir default values provide for a very reasonable installation:\r\n\r\n* The **gitConfigFile** parameter specifies the gitolite configuration file used by Redmine for Redmine-managed repositories.  This file (or path) is relative \r\nto the gitolite conf/ directory.  The default value of \"gitolite.conf\" is sufficient for most configurations.  If you choose to change this parameter, you will need\r\nto place a corresponding \"include\" statement in gitolite.conf.  Note that **gitConfigHasAdminKey** may be set to false for a non-standard gitolite.conf file. \r\nWhen this parameter is false, the plugin will assume that the administrative key is in the main gitolite.conf file; when true, the plugin will attempt to maintain \r\nthe administrative key in the Redmine-managed gitolite config file.\r\n\r\n* The **gitRepositoryBasePath** is the path *relative to the git user root* where the repositories are located.  This should always be non-empty and should end \r\nin a file separator, e.g. '/'.  Since gitolite always uses repositories/ as the default place for repositories you probably shouldn't have to change this.\r\n\r\n* The **gitRedmineSubdir** is an optional subdirectory under the *gitRepositoryBasePath* which can be used for all plugin-managed repositories. Its default value\r\nis the empty string (no special subdirectory).  If you choose to set it, make sure that the resulting path ends in a file separator, e.g. '/'.\r\n\r\n* The **gitRepositoryHierarchy** variable is a boolean value which denotes whether or not the plugin-managed repositories are placed into a hierarchy that \r\nmirrors the project hierarchy.  Its value is either 'true' (default) or 'false'.  \r\n\r\n* Finally for versions of Redmine with more than one repository per project (i.e. Redmine 1.4+), the **gitRepositoryIdentUnique** variable determines both\r\nwhether or not repository identifiers must be unique across all projects and, if not, the format of repository paths.  In particular, when **gitRepositoryIdentUnique** \r\nis 'true', repository identifiers must be unique across all projects (and cannot match the identifiers of projects either).  Path names are identical to those \r\nof pre-1.4 versions of this plugin.  If, on the other hand, the **gitRepositoryidentUnique** is set to 'false', then repository identifiers do not have to be \r\nunique across projects (although they still cannot have the same value as project identifiers). In this case, all repositories with non-blank identifiers (i.e. non-default\r\nrepositories) have the project identifier appended to their path.\r\n\r\nAll of these variables can be modified at a later time in the Administration => Plugins => Redmine Git Hosting Plugin configuration page.  However to ensure\r\nthat the database migration from your existing repositories goes smoothly it is best to modify these variables now.\r\n\r\nAs an example of the significance of the previous three variables, suppose that project-3 is a child of project-2 which is a child of project-1. Assume \r\n**gitRepositoryBasePath** == \"repository/\" and **gitRedmineSubdir** == \"projects\".  When **gitRepositoryHierarchy** is 'true', project-3.git will be stored in \r\nrepository/projects/project-1/project-2/project-3.git, which will further be reflected in the ssh access URL of repository/projects/project-1/project-2/project-3.git. In \r\ncontrast, when **gitRepositoryHierarchy** is 'false', project-3.git will be stored directly under repository/projects -- regardless of the number and identity of\r\nany parents that it might have.  In Redmine 1.4+, if **gitRepositoryIdentUnique** is set to 'false', then secondary repositories for project-3 will additionally\r\nhave paths of the form repository/projects/project-1/project-2/project-3/repo-1.git (when **gitRepositoryHierarchy** is 'true').  Note that the top of the settings page \r\n(Administration => Plugins => Redmine Git Hosting Plugin configuration page) provides information about how your chosen configuration affects the storage locations and \r\nURLs for accessing projects. \r\n\r\n**(7)** Run the rake db:migrate\\_plugins task to update the database.  You will need to do this once for every\r\nrails environment you have configured (e.g. production, development, testing).  For the production environment, run the following:\r\n\r\n    rake db:migrate_plugins RAILS_ENV=production\r\n\r\n*Note that you should perform a migrate\\_plugins operation whenever you update the plugin.*\r\n\r\n**(8)** Make a decision about whether or not you want the plugin to be able to modify scripts in the scripts directory on the fly.  If you elect to prevent \r\nthe plugin from modifying the scripts directory, you will be unable to modify certain settings from the plugin settings page (as discussed in \r\nthe \"Executable Scripts\" section, below). You have three options:\r\n\r\n* **Script Directory Writeable:** The simplest configuration is to allow the scripts directory to be written by the plugin.  Consider this the default \r\nconfiguration.  In this case, scripts will be regenerated \"on-the-fly\" by the plugin when certain settings change.  For this option, execute the following task \r\n(assuming that Redmine is executing as *www-data*):\r\n\r\n<pre>\r\nrake redmine_git_hosting:install_scripts RAILS_ENV=production WEB_USER=www-data\r\n</pre>\r\n\r\n* **Script Directory Read-Only:** Alternatively, you can choose to make the scripts directory read-only.  You might choose this option if you wish to keep \r\nscripts in the default directory (i.e. RAILS\\_ROOT/vendor/plugins/redmine\\_git\\_hosting/bin), but do not want to make this directory writeable by the web \r\nserver.  Be forewarned that you will not be able to change some of the settings on the settings page if scripts directory is not writeable by the web \r\nserver. \r\n\r\n<pre>\r\nrake redmine_git_hosting:install_scripts RAILS_ENV=production WEB_USER=www-data READ_ONLY=true \r\n</pre>\r\n\r\n* **Selinux Configuration:** A final option is appropriate if you wish to utilize selinux to protect your installation.  Although more details are given in the \"Selinux\"\r\nsection, below, the simplest selinux configuration involves executing the following command (which will also installs the scripts read-only, making some \r\nsettings unchangeable):\r\n\r\n<pre>\r\nrake selinux:install RAILS_ENV=production WEB_USER=www-data\r\n</pre>\r\n\r\nNote that your selected rake task must assign the web user (e.g. \"www-data\") as an owner of the new scripts directory.  If you omit the **WEB\\_USER** argument, \r\nthe script attempts to discover the web user by running \"ps aux\" and searching for \"httpd\".  On systems using apache without the passenger plugin, this\r\ndiscovery process *should* work properly.  Not all systems will \"do the right thing\", however.\r\n\r\n*Note that you should reinstall scripts whenever you update the plugin.*\r\n\r\n**(9)** Unless you want to access your repositories exclusively via Smart HTTP users will need to set a \r\npublic key to connect via SSH.  To do this, open a browser, login to ChiliProject/Redmine and follow the \"My Account\" Link\r\nin the upper right-hand corner of the page.  The right-hand column contains controls for adding your public key(s).  \r\n\r\nKeys should be unique, that is, the keys you set in ChiliProject / Redmine should not already exist in the gitolite repo.  In particular,\r\ndo not re-use the key you set as the gitolite admin key.\r\n\r\n**(10)** The plugin is now configured, but you may now want to set some additional settings on the \r\nAdministration => Plugins => Redmine Git Hosting Plugin page.  \r\n\r\n* The **Lock Wait Time** represents the amount of time that the plugin will wait in attempting to acquire its internal synchronization lock before giving \r\nup.  You probably will not need to change this value. \r\n\r\n* The **Temporary Directory** parameter points at a temporary directory for locks and gitolite administrative configurations. This path should end in \r\na path separator, e.g. '/'.  For a system in which multiple redmine sites point at the same gitolite repository (i.e. share a single git user), it \r\nis very important that all of said sites share the same temporary directory (so that locking works properly). You should probably just leave this \r\nparameter with its default value.\r\n\r\n* **Automatically Initialize Git Repositories For New Projects** can be enabled to automatically create a new git repository every time\r\nyou create a new project.  You won't have to create the project, and then create the repository -- this will be done all it one step.  However, if\r\nyou have both git and svn (or hg, or cvs etc.) repositories, this may cause problems so it is disabled by default.\r\n\r\n* The **Default Git Daemon Mode**, **Default Smart HTTP Mode**, and **Default Notify CIA Mode** settings denote the default settings for these parameters on \r\nnew repositories.\r\n\r\n* **Delete Git Repository When Project Is Deleted** can be enabled to let this plugin control repository deletion as well as repository creation.  By default, \r\nthis feature is disabled and when a repository is deleted in ChiliProject / Redmine, it is not deleted in gitolite.  This is a safety feature to prevent \r\nthe accidental loss of data. If this feature is enabled, the safety is turned off and the repository files will be deleted when the Project/Repository is \r\ndeleted in ChiliProject/Redmine.  Note, however, that even when this feature is enabled, deleted repositories are placed into a \"recycle_bin\" for a configurable\r\namount of time (defaulting to 24 hours) and can be recovered by recreating the project in Redmine with the same Identifier. Details are placed in the log.\r\n\r\n* The **Git Recycle Bin Base Path** is the path *relative to the git user root* where deleted repositories are placed.  This path should end in a path separator, \r\ne.g. '/'.  Deleted repositories are kept here for up to **gitRecycleExpireTime** hours (configurable, defaults to 24.0 hours).\r\n\r\n* **Show Checkout URLs** can be disabled to hide the git URL bar in the repository tab.  It is enabled by default.\r\n\r\nSee below in the \"Caching\" section of this README for more information on caching and how the caching variables should be configured.\r\n\r\n## Resynchronization of gitolite configuration \r\n\r\nWhenever a Redmine `fetch_changesets()` operation is executed (i.e. `http://REDMINE_ROOT/sys/fetch_changesets?key=xxx`), this plugin will check the\r\ngitolite keydir and configuration file for consistency.  It will correct any errors that it finds.  Further, regular execution of a fetch\\_changesets operation\r\nwill make sure that repositories placed in the recycle\\_bin (during delete operations) will be expired and removed.  Since there still seem to be some \r\nphantom synchronization problems, it is recommended that you execute `fetch_changesets()` regularly (every 15 to 30 minutes).\r\n\r\nTwo rake tasks can additionally be used for resynchronization (although these are redundant with executing `fetch_changesets()` through other means).  \r\n\r\n**(1)** To fixup the gitolite configuration file, fix errors, and delete expired files in the recycle\\_bin, execute:\r\n\r\n    rake redmine_git_hosting:update_repositories RAILS_ENV=production\r\n\r\n**(2)** To perform all the above operations while at the same time fetching changesets for all repositories, execute:\r\n\r\n    rake redmine_git_hosting:fetch_changesets RAILS_ENV=production\r\n\r\n**Note that it is very important that these commands be run as *www-user* (or whatever your web server user happens to be), lest you get permission problems later.** \r\n(The same is true of any `fetch_changesets()` operation initiated without using the web server, i.e. through the command line or from the cron daemon).\r\n\r\n## Interaction with non-Redmine gitolite users\r\n\r\nThis plugin respects gitolite repositories that are managed outside of Redmine or managed by both Redmine and non-Redmine users:\r\n\r\n* When performing a *fetch_changesets()* operation, this plugin will delete and reestablish all keys that are of the form \"redmine_\", \r\n  since it considers these to be under its exclusive control.  A special token, called \"redmine_dummy_key\", is used as a placeholder when no access \r\n  is granted for a given repository.\r\n* Keys other than \"redmine_*\" are left untouched and can be in projects by themselves or mixed in with projects managed by redmine.\r\n* When a Redmine-managed project is deleted (with the *Delete Git Repository When Project Is Deleted* option enabled), its corresponding git repository \r\n  *will not be deleted/recycled* if there are non-Redmine keys in the gitolite.conf file.\r\n\r\n## A Note About PATH variables\r\n\r\nOne major source of issues with this plugin is that Rails needs to be able to run both *sudo* and *git*.  Specifically, these programs need to be in one of the directories specified by\r\nthe PATH variable, in your Rails environment.  This requirement has been known to cause problems, particularly when installing on FreeBSD.\r\n\r\nTo address this problem in the Apache + Passenger configuration, one possible solution is to do the following:\r\n\r\n**(1)** Create a new file: /usr/local/bin/ruby18env, with the following code, modifying the PATH shown below to include all relevant directories:\r\n\r\n    #!/bin/sh\r\n    export PATH=\"/usr/local/lib/ruby/gems/1.8/bin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin\"\r\n    [path_to_your_ruby_executable, e.g. /usr/local/bin/ruby18] $*\r\n\r\n**(2)** Make this file executable:\r\n\r\n    chmod 755 /usr/local/bin/ruby18env\r\n\r\n**(3)** In your httpd.conf file, replace (or add) your PassengerRuby directive with:\r\n\r\n    PassengerRuby /usr/local/bin/ruby18env\r\n\r\n\r\nNote that this may be an issue for configurations other than Apache + Passenger, but as this is one of the most common configurations, instructions for that are provided above.\r\n\r\nThanks to user Tronix117 for helping to track down this issue and provide a solution for Apache + Passenger.\r\n\r\n\r\n## Placement and Modification of Executable Scripts\r\n\r\nAs of the most recent version of the plugin, you may place the executable scripts anywhere in the filesystem.  The default location of the scripts\r\nis set with **gitScriptDir** == ' ' => 'REDMINE_ROOT/vendor/plugins/redmine_git_hosting/bin'.  This is a good location, especially if you have multiple\r\nsimultaneous redmine installations on the same host, since scripts are customized to each installation.  Thus, we recommend that you consider keeping the\r\ndefault placement. In this location, some maintainers may not wish to allow the plugin to re-write the scripts during execution -- hence the options \r\nto make scripts read-only, as described in step (8) of the installation instructions, above.  Further, when selinux is installed, the scripts are not \r\nwriteable by default (because of selinux tags), since changing them could be construed to be a security hole.  \r\n \r\nWhen the script directory is not write-able by the web user, you also cannot alter four of the settings on the settings page (since their\r\nalteration would require the regeneration of scripts).  These values are: *gitScriptDir*, *gitUser*, *gitoliteIdentifyFile*, and\r\n*gitoliteIdentityPublicKeyFile*.  The settings page will make the fact that you cannot alter these values clear by marking that as '*[Cannot\r\nChange in Current Configuration]*'.\r\n\r\nThe simplest way to change these values after the fact is to (1) remove the old scripts, (2) alter the parameters on the settings page (after refreshing the \r\nsettings page), then (3) reinstalling scripts as discussed in step (8) of the installation instructions.  Scripts can be removed with:\r\n\r\n    rake redmine_git_hosting:remove_scripts RAILS_ENV=production\r\n\r\nAn alternate option is to alter these four settings in the init.rb file, then execute:\r\n\r\n    rake redmine_git_hosting:restore_defaults RAILS_ENV=production\r\n\r\nThis command will install the new values in the database.  You should follow up by reinstalling the scripts (since their values depend on the altered\r\nparameter(s)).  If you are moving the location of the *gitScriptDir*, you might want to remove the old scripts before executing 'restore_defaults'\r\nas described above.\r\n\r\n## Deployment Credentials\r\n\r\nAs of version 0.4.6x, this plugin provides deployment credentials on a per-repository basis.  These credentials are combinations of a public key and access \r\npermissions (R or RW+) which are attached directly to a repository rather than by attaching users to repositories.  Deployment credentials may be \r\nadded to a repository through the repository settings interface.  They may be added by anyone who is a manager for the project or by the administrator. \r\n\r\nPublic keys used in this way are called \"deploy keys\".  They are owned by the user who created them and may be edited on the user's public_key page (which is under \r\n\"my account\" for individual users).  Since keys have unique names (per creator), they may be reused in multiple deployment credentials (in multiple repositories), \r\nsimply by selecting them from the pulldown menu on the \"deployment credentials create\" dialog box.\r\n\r\nOne typical use-case would be for all deploy keys to be owned by the administrator and attached selectively to various repositories.  Note that the \"deployment \r\ncredentials create\" dialog is actually a convenience dialog in that it allows the simultaneous creation of both a deploy key and deployment credential in a single step, \r\neven suggesting a name for the deployment credential, with the eye to deployments that have a separate deploy key for each repository.  Reusing a deploy key in \r\nanother credential is a simple matter of selecting the key from a drop-down menu.\r\n\r\n## Post-Receive URLs\r\n\r\nAs of version 0.4.6x, this plugin supports the inclusion of GitHub-style Post-Receive URLs.  Once added, a post-receive URL will be notified when new changes\r\nare pushed to the repository.  Two versions of this functionality are available: (1) either a GitHub-style POST operation will include json-encoded information\r\nabout the updated branch or (2) an empty GET request will be issued to the given URL.  Post-Receive URLs may be added from the repository settings page.\r\n\r\n## Automatic Mirror Updates\r\n\r\nAs of version 0.4.0, this plugin can automatically push updates to repository mirrors when new changes are pushed to the repository.  Mirrors\r\nmust grant access to the public key defined in the gitolite_admin_id_rsa.pub public key file, which is displayed for convenience in the \r\nrepository settings tab.\r\n\r\nNote that 0.4.6x introduced the ability to selectively push branches to the mirror (using the git-push refspec mechanism) rather than mirroring all branches and tags.  \r\nTo utilize this feature, simply select a mirror update mode of \"Force Update Remote\" or \"Fast Forward (unforced)\" instead of the default \"Complete Mirroring\" in the\r\nmirror create/edit dialog.  More options will then become available.\r\n\r\n\r\n## Notification to CIA.vc\r\n\r\nAs of version 0.4.0, this plugin can notify CIA.vc when changes are pushed to the repository.  The project identifier on CIA.vc must match the \r\nproject identifier specified in ChiliProject/Redmine exactly\r\n\r\n\r\n## \"Smart\" HTTP Functionality\r\n\r\nSmart HTTP is an efficient way of communicating with the git server over http/https available in git client version 1.6.6 and newer.\r\nA more detailed description of what Smart HTTP is all about can be found at: http://progit.org/2010/03/04/smart-http.html\r\n\r\nThis plugin allows you to automatically enable Smart HTTP access to your repositories.  It is highly recommended that you\r\nenable Smart HTTP access only via HTTPS -- without encryption this is very insecure.  However, you will require a valid SSL\r\ncertificate for this to work properly, otherwise you will get permission errors.  If you want to enable (insecure) access via \r\nunencrypted HTTP go to the repository settings tab and select \"HTTPS and HTTP\" under the \"Git Smart HTTP\" tab.\r\n\r\nWhere a password is required, this is your Redmine user password.\r\n\r\nOnce Smart HTTP is enabled no further configuration is necessary.  You will be able to clone from/to the HTTP[S] URL specified in \r\nthe URL bar in the Project/Repository tab.\r\n\r\nAlso note that you will need to ensure that Basic Auth headers are being passed properly to Rails for this to work properly.  In Apache with mod_fcgid this may\r\nmean you need to add \"Passheader Authorization\" into the virtual host configuration file.  \r\n\r\nFurther, if you are proxying requests through a third-party (such as 'ngnix'), you need to make sure that you pass the protocol information onto Redmine so that it can \r\ndistinguish between HTTP and HTTPS.  One way to do this is to use the X-Forwarded-Proto header (which should be set to 'https' when https is in use from the client \r\nto the proxy).  On ngnix, you can do this with an \"include proxy.include\" statement in your configuration.\r\n\r\n## Using the Git Daemon\r\n\r\nIn order to export repositories via the git daemon (i.e. with URLs of the form 'git://'), you must first install this daemon and give it access to the gitolite \r\nrepositories (outside the scope of this README).  Once you do so, then control of *which* repositories are exported depends on two things: (1) the setting of \r\nthe *public* flag for the project and (2) the setting of the *GitDaemon* parameter in the project's repository settings.  A repository will be exported via the git daemon \r\nonly if its corresponding project is public *and* its **GitDaemon** flag is enabled.  The redmine_git_hosting plugin handles such repositories by including a \r\nspecial \"daemon\" key in the gitolite.conf file.  Presence of this key, in turn, causes gitolite to insert a \"git-daemon-export-ok\" flag at the top-level of \r\nthe corresponding repository; this flag is interpreted by the git-daemon as a sign to export the repository.\r\n\r\nNote that the act of changing a project from public to private will set the **GitDaemon** flag to false automatically (to prevent accidental export of the project\r\nvia the git-daemon later).\r\n\r\n## Caching Options\r\n\r\nAs of version 0.3.0 and later this plugin includes code for caching output of the git command, which is called\r\nto display the details of the git repository.  Redmine/ChiliProject by default calls git directly every time\r\nthis information is needed.  This can result in relatively long page load times.\r\n\r\nThis plugin caches the output of git commands to dramatically improve page load times, roughly a 10x speed increase.\r\nOn a 1GB VM running Ubuntu 11.04 median repository page load times dropped from 2300ms to 180ms.  Testing was done\r\nwith ab utility in the apache2-utils package.\r\n\r\nThere are three configurable caching parameters in the plugins settings page: Max Cache Elements, Max Cache Element\r\nSize and Max Cache Time.\r\n\r\n* The **Max Cache Elements** is the maximum number of git commands for which to cache the output.\r\n\r\n* The **Max Cache Element Size** is the maximum size of the git output to cache.   Anything above this size won't be cached,\r\nand git will be called directly every time this command is run.\r\n\r\n* The **Max Cache Time** is the maximum amount of time the git command will be cached.  No matter what, the output of git\r\ncommands for a given repository are cleared when new commits are pushed to the server and the post-receive hook is\r\ncalled.\r\n\r\nThis caching functionality only works in Redmine 1.2.x+ and ChiliProject v2.x+ -- while this plugin is compatible\r\nwith ChiliProject 1.x the caching functionality is not.\r\n\r\nImportant note: If using *mysql* for your database, you must make sure that the **max_allowed_packet** size is set (in, e.g., /etc/my.cnf) to be at least as \r\nlarge as the value you specify for **Max Cache Element Size** above.  If you do not do this, you are likely to get very strange failures of the web \r\nserver.  Such a setting must be placed in the `[mysqld]` parameter section of this file, for instance:\r\n\r\n<pre>\r\n[mysqld]\r\ndatadir=/var/lib/mysql\r\nsocket=/var/lib/mysql/mysql.sock\r\nuser=mysql\r\nsymbolic-links=0\r\nmax_allowed_packet=32M\r\n</pre>    \r\n\r\nThe above example should allow **Max Cache Element Size** == 32M.\r\n\r\n## Fast Deployment with YourChili Bash Library\r\n\r\nInstead of installing/configuring by hand, one option for quickly deploying a fully-functional system for hosting\r\ngit repositories on an Ubuntu VPS is the YourChili bash library. (http://github.com/ericpaulbishop/yourchili)\r\nThis library allows you to quickly deploy ChiliProject, with this plugin to an uninitialized VPS node with Ubuntu\r\n10.10 (from e.g. Linode) using nginx and Passenger.  Just run the init\\_nginx\\_stack.sh script followed by the\r\nchili\\_test.sh script, modifying the variables in those scripts as desired.  This library is still under development,\r\nso these instructions may need to be updated in the near future.\r\n\r\n## Selinux Configuration for Redmine\r\n\r\nThis plugin can be configured to run with selinux.  We have included a rakefile in tasks/selinux.rake to assist\r\nwith installing with selinux.  You should start by editing init.rb and migrating as described above.  Then, you \r\ncan execute one of the selinux rake tasks (from the Redmine root).  For instance, the simplest option installs \r\na selinux configuration for both Redmine and the redmine_git_hosting plugin:   \r\n\r\n    rake selinux:install RAILS_ENV=production \r\n\r\nThis will generate the redmine_git_hosting binaries in ./bin, install a selinux policy for these binaries (called\r\nredmine_git.pp), then install a complete context for Redmine as follows:\r\n\r\n**(1)** Most of Redmine will be marked with \"public_content_rw_t\". \r\n\r\n**(2)** The dispatch files in Rails.root/public/dispatch.* will be marked with \"httpd_sys_script_exec_t\"\r\n\r\n**(3)** The redmine_git_hosting binaries in Rails.root/vendor/plugins/redmine_git_hosting/bin will be labeled\r\nwith \"httpd_redmine_git_script_exec_t\", which has been crafted to allow the sudo behavior required by these\r\nbinaries.\r\n\r\nNote that this rake file has additional options.  For instance, you can specify multiple Redmine roots with regular \r\nexpressions (not globbed expressions!) as follows (notice the use of double quotes):\r\n\r\n    rake selinux:install RAILS_ENV=production ROOT_PATTERN=\"/source/.*/redmine\"\r\n\r\nThese additional options are documented in the selinux.rake file.  Under normal operation, you will get one selinux complaint about /bin/touch in \r\nyour log each time that you visit the plugin settings page.\r\n\r\nOnce this plugin is placed under selinux control, four of the redmine_git_hosting settings can \r\nnot be modified from the settings page.  They are: 'gitScriptDir', 'gitUser', 'gitoliteIdentityFile', and \r\n'gitoliteIdentityPublicKeyFile'.  The plugin settings page will make this clear.  One way to \r\nmodify these options is to remove the old scripts, refresh the setting page, change options, then reinstall scripts.  Specifically, you can\r\nremove scripts with:\r\n\r\n    rake selinux:redmine_git_hosting:remove_scripts RAILS_ENV=production\r\n\r\nScripts and selinux policy/tags can be reinstalled with:\r\n\r\n    rake selinux:redmine_git_hosting:install RAILS_ENV=production\r\n\r\nAlternately, you can change the frozen parameters by altering them in the init.rb file and resetting the options to the defaults via:\r\n\r\n    rake redmine_git_hosting:restore_defaults RAILS_ENV=production\r\n\r\nOne final comment: The selinux policy exists in binary form as selinux/redmine_git.pp. Should this policy\r\nneed to be rebuilt, an additional rake task exists which will build the policy from selinux/redmine_git.te:\r\n\r\n    rake selinux:redmine_git_hosting:build_policy RAILS_ENV=productinon\r\n\r\nThis task can be followed by the selinux:install task.\r\n\r\nThe rakefile and selinux configuration has been primarily tested on Redhat Enterprise Linux version 6.x \r\nwith apache and fcgi. Other configurations may require slight tweaking.\r\n\r\n## Tested Configurations\r\n\r\nThis plugin has been primarily tested on Ubuntu Server 10.10 and 11.04 (32 and 64 bit) with ChiliProject v1.x,\r\nChiliProject 2.0.0 and Redmine 1.2.1 with PostgreSQL as the database (July, 2011).  It has also been tested\r\nwith Redmine 1.2.1, 1.2.2, 1.3.0, and 1.3.1 with mySql on Redhat Enterprise Linux 6.x with Apache and FCGI.  Limited testing\r\nhas occurred with Redmine 1.1.3. It is possible that some debugging will be necessary for other \r\nconfigurations.  Selinux configurations were tested under Redhat Enterprise Linux version 6.x with Apache and FCGI.\r\n\r\n## Required gems\r\n\r\nIn order to use this plugin you must have the following gems installed:\r\n\r\nlockfile\r\n\r\ninifile\r\n\r\nnet-ssh\r\n\r\n\r\n## Copyright & License\r\n\r\nThis plugin is based largely on the Gitosis plugin by Jan Schulz-Hofen for http://plan.io.  Several updates/fixes\r\nwere provided by github users untoldwind, tingar and ericpaulbishop. These updates were merged together and\r\nexpanded upon by Eric Bishop to create this more comprehensive Git Hosting plugin.\r\n\r\nCopyright (c) 2011 John Kubiatowicz (kubitron@cs.berkeley.edu) MIT License.\r\n\r\nCopyright (c) 2010-2011 Eric Bishop (ericpaulbishop@gmail.com) MIT License.\r\n\r\nCopyright (c) 2009-2010 Jan Schulz-Hofen, ROCKET RENTALS GmbH (http://www.rocket-rentals.de). MIT License.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}